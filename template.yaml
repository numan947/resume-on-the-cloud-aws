AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  portfolio-on-aws

  SAM Template for portfolio-on-aws application which I am using to host my resume, portfolio and blog on AWS.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    MemorySize: 128
Parameters:
  PortfolioBucketName:
    Type: String
    Description: The name of the S3 bucket to hold the portfolio files
  PortfolioHostedZoneParameter:
    Type: String
    Description: The hosted zone for the Route53 records
  PortfolioDomainNameParameter:
    Type: String
    Description: The domain name of the site
  PortfolioCertificateArn:
    Type: String
    Description: The ARN of the certificate for the site
  CounterTableName:
    Type: String
    Description: The name of the DynamoDB table to hold the visitor counter
    Default: "temp-counter-table"
  IpTableName:
    Type: String
    Description: The name of the DynamoDB table to hold the IP addresses of the visitors
    Default: "temp-ip-table"
  ApiDomainNameParameter:
    Type: String
    Description: The subdomain of the API
    Default: "api."
  ApiCertificateArnParameter:
    Type: String
    Description: The ARN of the certificate for the API


Resources:
  PortfolioBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref PortfolioBucketName
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldFiles
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 3
  
  PortfolioBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PortfolioBucket
      PolicyDocument:
        Id: PublicReadForGetBucketObjectsForPortfolioBucket
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${PortfolioBucket}/*

  PortfolioRoute53Records:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: !Ref PortfolioHostedZoneParameter
      RecordSets:
        - Name: !Sub ${PortfolioDomainNameParameter}
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt PortfolioCloudFrontDistribution.DomainName
        - Name: !Sub www.${PortfolioDomainNameParameter}
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt PortfolioCloudFrontDistribution.DomainName

  
  PortfolioCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: "CDN for portfolio-on-aws"
        Origins: # Setup the origin for the distribution
          - DomainName: !Select [2, !Split ["/", !GetAtt PortfolioBucket.WebsiteURL]] # The domain name of the S3 bucket website endpoint
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only # The origin protocol policy for the distribution, has to be http-only for S3 buckets
        
        Enabled: true # Enable the distribution
        DefaultRootObject: index.html # Set the default root object
        CustomErrorResponses: # Setup custom error responses
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /404.html
        DefaultCacheBehavior: # Setup the default cache behavior
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          DefaultTTL: 3600 #TODO: change later
          MinTTL: 0
          MaxTTL: 86400
          ViewerProtocolPolicy: redirect-to-https

        Aliases: # Setup the aliases for the distribution, i.e. the domain names that the distribution will respond to
          - !Ref PortfolioDomainNameParameter
          - !Sub www.${PortfolioDomainNameParameter}
        ViewerCertificate: # Setup the viewer certificate for the distribution, makes sure the site is served over HTTPS
          AcmCertificateArn: !Ref PortfolioCertificateArn
          SslSupportMethod: sni-only


  CounterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref CounterTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "PrimaryKey"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PrimaryKey"
          KeyType: "HASH"
  
  IpTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref IpTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "IpAddress"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "IpAddress"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ExpiresAt"
        Enabled: true
  
  
  
  PortfolioApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: portfolio-api
      StageName: prod
      Cors:
        AllowMethods: "'GET, POST, OPTIONS'"
        AllowOrigin: "'https://shasan.xyz, https://www.shasan.xyz'"
        AllowHeaders: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-S'"
      Domain:
        DomainName:
          !Join ["", [!Ref ApiDomainNameParameter, !Ref PortfolioDomainNameParameter]]
        CertificateArn: !Ref ApiCertificateArnParameter
        Route53:
          HostedZoneId: !Ref PortfolioHostedZoneParameter
  
  UpdateCounterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_counter/
      Handler: app.lambda_handler
      Runtime: python3.10
      Environment:
        Variables:
          COUNTER_TABLE_NAME: !Ref CounterTableName
          IP_TABLE_NAME: !Ref IpTableName
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CounterTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref IpTableName
      Events:
        UpdateCounter:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioApi
            Path: /counter
            Method: POST      
  # HelloWorldFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: hello_world/
  #     Handler: app.lambda_handler
  #     Runtime: python3.10
  #     Architectures:
  #       - x86_64
  #     Events:
  #       HelloWorld:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           Path: /hello
  #           Method: get

# Outputs:
  # # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # # Find out more about other implicit resources you can reference within SAM
  # # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # HelloWorldApi:
  #   Description: "API Gateway endpoint URL for Prod stage for Hello World function"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  # HelloWorldFunction:
  #   Description: "Hello World Lambda Function ARN"
  #   Value: !GetAtt HelloWorldFunction.Arn
  # HelloWorldFunctionIamRole:
  #   Description: "Implicit IAM Role created for Hello World function"
  #   Value: !GetAtt HelloWorldFunctionRole.Arn
